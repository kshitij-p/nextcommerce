generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Product       Product[]
    Cart          Cart?
    reviews       Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Image {
    id        String  @id @default(cuid())
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    //This is the S3 key
    key       String  @db.Text
    //This is the actual image link to publically see the image
    publicUrl String  @db.Text
}

model CartItem {
    id       String @id @default(cuid())
    quantity Int

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    cartId    String
    productId String
}

model Cart {
    id        String     @id @default(cuid())
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String     @unique
    cartItems CartItem[]
}

model Review {
    id        String  @id @default(cuid())
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    body      String  @db.Text
    rating    Int     @default(1) @db.SmallInt

    @@unique([userId, productId])
}

enum ProductCategories {
    Appliances
    Software_and_Games
    Beauty
    Books
    Car_and_Motorbike
    Clothing_and_Accessories
    Collectibles
    Electronics
    Furniture
    Grocery_and_Food
    Health_and_Personal_Care
    Home_and_Kitchen
    Jewellery
    Movies_and_TV_Shows
    Music
    Office_Products
    Pet_Supplies
    Shoes_and_Footwear
    Sports_and_Fitness
    Watches
    Other
}

model Product {
    id          String            @id @default(cuid())
    user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    title       String            @db.Text
    description String            @db.Text
    price       Int
    images      Image[]
    cartItems   CartItem[]
    reviews     Review[]
    category    ProductCategories @default(Other)
}
